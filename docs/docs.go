// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Возвращает список пользователей с фильтрацией и пагинацией",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Получить отфильтрованных пользователей",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Имя",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фамилия",
                        "name": "surname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Национальность",
                        "name": "nationality",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Гендер",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "возраст",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Номер страницы",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "размер страницы",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/public_dto.PagedUsers"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/public_dto.ResponseError"
                        }
                    }
                }
            }
        },
        "/DeleteUser/{id}": {
            "delete": {
                "description": "Удаляет пользователя по ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Удалить пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пользователь успешно удален!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Ошибка удаления пользователя или неверный ID",
                        "schema": {
                            "$ref": "#/definitions/public_dto.ResponseError"
                        }
                    }
                }
            }
        },
        "/PostUserName": {
            "post": {
                "description": "Принимает имя, фамилию и запрашивает определённые данные из внешних API (возраст, национальность, пол).Сохраняет результат в БД",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Создать нового пользователя",
                "parameters": [
                    {
                        "description": "Данные для регистрации пользователя",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/public_dto.UserRegistration"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Пользователь успешно создан!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации или получения данных",
                        "schema": {
                            "$ref": "#/definitions/public_dto.ResponseError"
                        }
                    }
                }
            }
        },
        "/UpdateUser/{id}": {
            "put": {
                "description": "Обновляет данные пользователя по ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Обновить данные пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Новые данные пользователя",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/public_dto.NewUserData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные успешно обновлены!",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Ошибка обновления или неверные данные",
                        "schema": {
                            "$ref": "#/definitions/public_dto.ResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.User": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "nationality": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "public_dto.Errors": {
            "type": "object",
            "properties": {
                "error_massage": {
                    "type": "string"
                },
                "errors_type": {
                    "type": "string"
                }
            }
        },
        "public_dto.NewUserData": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "gender": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "public_dto.PagedUsers": {
            "type": "object",
            "properties": {
                "page": {
                    "description": "Текущая страница",
                    "type": "integer"
                },
                "pageSize": {
                    "description": "Размер страницы",
                    "type": "integer"
                },
                "total": {
                    "description": "Общее количество пользователей",
                    "type": "integer"
                },
                "totalPages": {
                    "description": "Общее количество страниц",
                    "type": "integer"
                },
                "users": {
                    "description": "Список пользователей",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                }
            }
        },
        "public_dto.ResponseError": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/public_dto.Errors"
                    }
                }
            }
        },
        "public_dto.UserRegistration": {
            "description": "DTO для регистрации нового пользователя",
            "type": "object",
            "properties": {
                "surname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "TestAPI",
	Description:      "CRUD api",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
